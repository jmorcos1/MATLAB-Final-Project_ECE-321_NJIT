function [y,nFigs] = noiseProcess_Characterization(noiseType, noiseMean, noiseVar, pNFigs)
%NOISE_PROCESS_Characterization:
%{
    REAL-WORLD DESCRIPTION: Suppose that the noise of a transmission line
is being analyzed.  Without sending any real signals, the engineers are
sampling the line to discover the characteristics of the random noisebe being
picked up.
        In this case, we have to simulate the noise.  Let's assume that the
    Engineers don't know anything about the noise, but they want to discover
    the mean in order to bring the average of the noise to 0.
        The simulated noise has a gaussian or a laplacian distribution.  Arbitrarily, we
    decide a number for the value of the theoretical mean.  This function
    will then take a very large number of samples, generate a histogram,
    and an estimation of the mean (experimentally).  Finally, the Engineers
    will have a clear understanding of the type of noise in the line.  They
    will also be able to offset the average noise so that the mean can
    become zero.
********In this case, we will simulate 2 examples of noise which will be
    used as the gaussian noise processes for our project.  They will both
    have the same arbitrary mean (theoretically), and two different
    Variences.  The same will be done for the Laplacian Noise Type.
    INPUTS AND OUTPUTS:  The first Input parameter is a string that specifies the type of noise being characteriazed.
the second Input parameter is the theoretical mean of the
simulated noise.  The third input is a vector containing each variance possibility of the noise to be examined.
The fourth Input is used to keep track of the total number of figures
being generated by the entire program (pNFigs is the previous number of figures.
    The first output variable is a Vector containing k elements (2), which are
the estimated means of each noise Varience case.  The second output returns the current
total number of figures that have been generated by the program (after function is done working).
%}
if nargin ~= 4
    error('4 Input Arguments are Required');
else
    figNum = pNFigs + 1;
    fig = figure(figNum);
    clf('reset')    %Make sure current figure is empty
    nVars = length(noiseVar);   %Number of cases to be examined is determined by the variance vector
    y = zeros(1, nVars);        %Preallocation for output vector
    nSamples = 100000;          %Large number of samples gives a good mean esitmate 
    
    positionG = zeros(nVars,4);
    for k = 1:nVars
        %sample the RandVar:
        if strcmp(noiseType, 'Gaussian')
            X = gaussNoise(noiseMean, noiseVar(k), nSamples);
        else
            X = laprnd(nSamples, 1, noiseMean, sqrt(noiseVar(k)));
        end
        %Plot Both Histograms in one Figure:
        %(one for each varience)
        %The following group of lines are formatting the figure
        %-------------------------------------------------------------
        ax = subplot(1, 2, k, 'Parent', fig);
        positionG(k,:) = ax.Position;
        l = positionG(k,1);
        b = positionG(k,2);
        w = positionG(k,3);
        h = positionG(k,4); 
        if k == 1
            positionG(k,:) = [l/6.2, (b+(h/7.1)), (w+l)*1.1, h*0.9]; 
            ax.Position = positionG(k,:);
        else
            lp = positionG((k-1),1);
            bp = positionG((k-1),2);
            wp = positionG((k-1),3);
            hp = positionG((k-1),4);
            lpE = lp + wp;
            positionG(k,:) = [(lpE*0.95+lp*0.85), bp, wp, hp]; 
            ax.Position = positionG(k,:);
        end
        %-------------------------------------------------------------
        %Estimate the Mean, STD, and Variance:
        xMean = mean(X);
        xSTD = std(X);
        xVar = var(X);
        %More Formatting and Annotation for the Graph:
        positionA = positionG(k,:);
        positionA(1) = positionA(1)*1.1;
        positionA(2) = positionA(2)/7.5;
        positionA(3) = positionA(3)/2.5;
        positionA(4) = positionA(2)*4.8;
        annotation('textbox', positionA, 'String',...
            {['Number of Samples: ' num2str(nSamples)],...
            'Estimated Values:', ['     Mean: ' num2str(xMean)],...
            ['     STD: ' num2str(xSTD)], ['     Variance: ' num2str(xVar)]},...
            'FontSize', 9.5, 'FontWeight', 'bold', 'LineWidth', 1,...
            'BackgroundColor', 'w');
        %Call Function to Plot the Actual Histogram:
        myHist3(X, ax, noiseType, k);
        %Output vector with 2 elements, one for each of the estimated
        %means:
        y(k) = xMean;        
    end
    %Output new total number of figures produced so far
    nFigs = figNum;
end
end

